HOWTO compile for android
~~~~~~~~~~~~~~~~~~~~~~~~~
An Android compile is not straightforward because Android can only run java
applications. These java applications can load shared libraries written in
any language. The port of Qt to android (qt-lighthouse) works by compiling
the Qt application as a shared library, writing a wrapper in java which loads
it, and pushing both (+ the Qt libs) to the android device.

Also QtLocation (in particular the GPS bits) doesn't work on Android so we
need a workaround.

Pre-requisites
~~~~~~~~~~~~~~
 * The android NDK (version 5 works):
            http://developer.android.com/sdk/ndk/index.html
 * The android SDK (for tools/adb - used to install libs/MoNav to the device)
 * java + ant: "sudo apt-get install sun-java6-jdk ant"

Compile monav
~~~~~~~~~~~~~
You may want to patch monav so that logging goes through Androids logging
system (and can be read with "adb logcat" on a connected PC).
    patch -p1 < platform/android/android-monav.diff # optional

    make distclean # If you've previously compiled this source tree
    /data/local/qt/bin/qmake CONFIG+=release monavclient.pro
    make

Install
~~~~~~~
    adb install -r platform/android/MoNav-debug.apk
    adb push bin/libmonav.so /data/local/lib/
    adb shell
        mkdir /data/local/Settings
        exit
    Copy the pre-processed data to your device.

Debugging
~~~~~~~~~
Qt on android seems to frequently fail silently. adb logcat run from a
connected PC (or the PC running the emulator) will show log messages which
should give you a clue. If a library fails to load for no apaprent reason
it most likely depends on symbols from another library which hasn't yet
been loaded.

TODO
~~~~
Work out how to make a binary package for distribution on the website.
